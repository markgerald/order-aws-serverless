service: orders-lambda-service

provider:
  name: aws
  runtime: go1.x
  stage: prod
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [OrdersDynamoDBTable, Arn]
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::${self:custom.s3BucketName}/*"
        - "arn:aws:s3:::${self:custom.s3BucketName}"

functions:
  apiOrders:
    handler: bin/main
    events:
      - http:
          path: /
          method: post
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamodbTableName}
  weeklyCountOrders:
    handler: count/bin/main
    events:
      - schedule:
          rate: cron(0 12 ? * SUN *)
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamodbTableName}
      S3_BUCKET: ${self:custom.s3BucketName}

custom:
  dynamodbTableName: orders-${self:provider.stage}
  s3BucketName: orders-count-${self:provider.stage}

resources:
  Resources:
    OrdersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodbTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OrderS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.s3BucketName}